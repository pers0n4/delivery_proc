/**
 * @file main.pc
 * @author Dong-Young Kim (31337.persona@gmail.com)
 * @brief
 * @version 0.1.0
 * @date 2021-11-21
 *
 * @copyright Copyright (c) 2021
 *
 */

#include <sqlca.h>
#include <sqlcpr.h>
#include <sqlda.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdio_ext.h>
#include <stdlib.h>
#include <string.h>

#include "database.h"
#include "terminal.h"

char query[1024];

struct User {
  int user_id;
  VARCHAR username[21];
  VARCHAR phone_number[15];
  VARCHAR address[81];
  VARCHAR user_type[9];
};
bool is_authorized = false;

struct User *user;

typedef struct Shop {
  int shop_id;
  int owner_id;
  VARCHAR title[21];
} Shop;

Shop *shop;

int SignUp() {
  EXEC SQL BEGIN DECLARE SECTION;
  VARCHAR username[21];
  VARCHAR password[41];
  VARCHAR password_confirm[41];
  VARCHAR phone_number[15];
  VARCHAR address[81];
  VARCHAR user_type[9];
  EXEC SQL END DECLARE SECTION;

  printf("아이디를 입력하세요: ");
  fgets((char *)username.arr, sizeof(username.arr), stdin);
  username.arr[strlen((char *)username.arr) - 1] = '\0';
  username.len = strlen((char *)username.arr);
  if (username.len == 0) {
    printf("아이디를 입력하세요.\n");
    return -201;
  }

  printf("비밀번호를 입력하세요: ");
  fgets((char *)password.arr, sizeof(password.arr), stdin);
  password.arr[strlen((char *)password.arr) - 1] = '\0';
  password.len = strlen((char *)password.arr);
  if (password.len == 0) {
    printf("비밀번호를 입력하세요.\n");
    return -202;
  }

  printf("비밀번호를 한 번 더 입력하세요: ");
  fgets((char *)password_confirm.arr, sizeof(password_confirm.arr), stdin);
  password_confirm.arr[strlen((char *)password_confirm.arr) - 1] = '\0';
  password_confirm.len = strlen((char *)password_confirm.arr);
  if (strcmp((char *)password.arr, (char *)password_confirm.arr)) {
    printf("비밀번호가 일치하지 않습니다.\n");
    return -202;
  }

  printf("전화번호를 입력하세요: ");
  fgets((char *)phone_number.arr, sizeof(phone_number.arr), stdin);
  phone_number.arr[strlen((char *)phone_number.arr) - 1] = '\0';
  phone_number.len = strlen((char *)phone_number.arr);
  if (phone_number.len == 0) {
    printf("전화번호를 입력하세요.\n");
    return -203;
  }

  printf("주소를 입력하세요: ");
  fgets((char *)address.arr, sizeof(address.arr), stdin);
  address.arr[strlen((char *)address.arr) - 1] = '\0';
  address.len = strlen((char *)address.arr);
  if (address.len == 0) {
    printf("주소를 입력하세요.\n");
    return -204;
  }

  printf("회원 유형을 입력하세요 [Consumer / Provider]: ");
  fgets((char *)user_type.arr, sizeof(user_type.arr), stdin);
  printf("%s\n", user_type.arr);
  if (user_type.len == 0 || !strcmp((char *)user_type.arr, "consumer") ||
      !strncmp((char *)user_type.arr, "c", 1) ||
      !strncmp((char *)user_type.arr, "C", 1)) {
    user_type.len = strlen(strcpy((char *)user_type.arr, "consumer"));
  } else if (!strcmp((char *)user_type.arr, "provider") ||
             !strncmp((char *)user_type.arr, "p", 1) ||
             !strncmp((char *)user_type.arr, "P", 1)) {
    user_type.len = strlen(strcpy((char *)user_type.arr, "provider"));
  } else {
    printf("회원 유형을 입력하세요.\n");
    return -205;
  }
  printf("%s\n", user_type.arr);

  // clang-format off
  EXEC SQL INSERT
    INTO users(user_id,
               username,
               password,
               phone_number,
               address,
               user_type)
    VALUES (users_seq.nextval,
            :username,
            :password,
            :phone_number,
            :address,
            :user_type);
  // clang-format on

  EXEC SQL COMMIT WORK;
  printf("\n회원가입이 완료되었습니다.\n");
  return 0;
}

int SignIn() {
  EXEC SQL BEGIN DECLARE SECTION;
  VARCHAR username[21];
  VARCHAR password[41];
  EXEC SQL END DECLARE SECTION;

  printf("아이디를 입력하세요: ");
  fgets((char *)username.arr, sizeof(username.arr), stdin);
  username.arr[strlen((char *)username.arr) - 1] = '\0';
  username.len = strlen((char *)username.arr);
  if (username.len == 0) {
    printf("아이디를 입력하세요.\n");
    return -211;
  }

  printf("비밀번호를 입력하세요: ");
  fgets((char *)password.arr, sizeof(password.arr), stdin);
  password.arr[strlen((char *)password.arr) - 1] = '\0';
  password.len = strlen((char *)password.arr);
  if (password.len == 0) {
    printf("비밀번호를 입력하세요.\n");
    return -212;
  }

  // clang-format off
  EXEC SQL SELECT user_id, username, phone_number, address, user_type
    INTO :user
    FROM users
    WHERE username = :username
    AND password = :password;
  // clang-format on

  user->username.arr[user->username.len] = '\0';
  user->phone_number.arr[user->phone_number.len] = '\0';
  user->address.arr[user->address.len] = '\0';
  user->user_type.arr[user->user_type.len] = '\0';

  is_authorized = true;
  printf("\n%s님 환영합니다.\n", user->username.arr);

  return 0;
}

int SignOut() {
  free(shop);
  memset(user, 0, sizeof(struct User));
  is_authorized = false;
  printf("로그아웃 되었습니다.\n\n");
  return 0;
}

int RegisterShop() {
  EXEC SQL BEGIN DECLARE SECTION;
  VARCHAR title[21];
  EXEC SQL END DECLARE SECTION;

  printf("가게 이름을 입력하세요: ");
  fgets((char *)title.arr, sizeof(title.arr), stdin);
  title.arr[strlen((char *)title.arr) - 1] = '\0';
  title.len = strlen((char *)title.arr);
  if (title.len == 0) {
    printf("가게 이름을 입력하세요.\n");
    return -1011;
  }

  // clang-format off
  EXEC SQL INSERT
    INTO shops(shop_id,
               owner_id,
               title)
    VALUES (shops_seq.nextval,
            :user->user_id,
            :title);
  // clang-format on

  EXEC SQL COMMIT WORK;
  printf("\n가게가 등록되었습니다.\n");
  return 0;
}

int ReadShopsFromOwner() {
  int shop_id;
  VARCHAR title[21];

  sprintf(query, "SELECT shop_id, title FROM shops WHERE owner_id = %d",
          user->user_id);
  // clang-format off
  EXEC SQL PREPARE s1 FROM :query;
  EXEC SQL DECLARE c1 CURSOR FOR s1;
  // clang-format on
  EXEC SQL OPEN c1;
  EXEC SQL WHENEVER NOT FOUND DO break;

  printf("%10s %10s\n", "shop_id", "title");
  while (true) {
    // clang-format off
    EXEC SQL FETCH c1 INTO :shop_id, :title;
    // clang-format on
    title.arr[title.len] = '\0';
    printf("%10d %10s\n", shop_id, title.arr);
  }
  printf("Total: %d\n", sqlca.sqlerrd[2]);

  EXEC SQL CLOSE c1;
  return 0;
}

int SelectShop() {
  int shop_id;
  int owner_id;
  VARCHAR title[21];

  if (shop == NULL) {
    if ((shop = (Shop *)malloc(sizeof(Shop))) == NULL) {
      fprintf(stderr, "Memory allocation error.\n");
      exit(EXIT_FAILURE);
    }
  }

  printf("가게 아이디를 입력하세요: ");
  scanf("%d", &shop_id);

  EXEC SQL WHENEVER NOT FOUND DO SqlError("ORACLE error--\n");

  // clang-format off
  EXEC SQL SELECT shop_id, owner_id, title
    INTO :shop
    FROM shops
    WHERE shop_id = :shop_id;
  // clang-format on

  shop->title.arr[shop->title.len] = '\0';

  return 0;
}

void ShowMenu() {
  printf("0. 종료\n\n");
  if (is_authorized) {
    printf("1. 회원정보 수정 (TODO)\n");
    printf("2. 로그아웃\n");
  } else {
    printf("1. 로그인\n");
    printf("2. 회원 가입\n");
  }

  puts("");

  if (!strcmp(user->user_type.arr, "provider")) {
    printf("101. 가게 등록\n");
    printf("102. 가게 조회\n");
    printf("103. 가게 선택\n");
    puts("");

    if (shop) {
      printf("201. 메뉴 등록 (TODO)\n");
      printf("202. 메뉴 수정 (TODO)\n");
      printf("203. 메뉴 삭제 (TODO)\n");
      puts("");
    }
  }

  if (!strcmp(user->user_type.arr, "customer")) {
    printf("101. 주문하기 (TODO)\n");
    printf("102. 주문 조회 (TODO)\n");
    printf("103. 리뷰 (TODO)\n");
    puts("");
  }
}

int main(int argc, const char *argv[]) {
  ClearScreen();
  ConnectDatabase(argc, argv);

  if ((user = (struct User *)malloc(sizeof(struct User))) == NULL) {
    fprintf(stderr, "Memory allocation error.\n");
    exit(EXIT_FAILURE);
  }

  int select_menu = -1;
  int return_code = 0;
  while (select_menu != 0 && return_code == 0) {
    if (is_authorized) {
      printf("현재 로그인된 유저: %s\n\n", user->username.arr);
    }

    ShowMenu();

    printf("입력: ");
    scanf("%d", &select_menu);
    __fpurge(stdin);
    ClearScreen();

    if (is_authorized) {
      switch (select_menu) {
        case 1:
          //
          break;
        case 2:
          return_code = SignOut();
          break;
        case 101:
          return_code = RegisterShop();
          break;
        case 102:
          return_code = ReadShopsFromOwner();
          KeyHit();
          break;
        case 103:
          return_code = SelectShop();
          break;
        default:
          break;
      }
    } else {
      switch (select_menu) {
        case 1:
          return_code = SignIn();
          break;
        case 2:
          return_code = SignUp();
          break;
        default:
          break;
      }
    }
    ClearScreen();
  }

  EXEC SQL ROLLBACK WORK RELEASE;
  exit(EXIT_SUCCESS);
}
